name: Plan / Apply On Merge

on:
  pull_request:
    types: [closed]

jobs:
  inform_about_apply:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    name: Inform About Apply
    runs-on: ubuntu-20.04
    steps:
      - name: Inform on PR that Apply is Running
        run: |
          echo '***Running terraform apply*** \
                Results will display here...'

  plan:
    name: Plan
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        path:
          - project1
          - project2
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.aws-region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Initialize Terraform
        continue-on-error: true
        run: |
          cd terraform/${{ matrix.path }}
          terraform init -backend="true" -backend-config="backend_stage.hcl"  || terraform init -backend="true" -backend-config="backend_stage.hcl" 

      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          cd terraform/${{ matrix.path }}
          terraform plan -var-file="stage.tfvars" -no-color -out=plan.tfplan ||  terraform plan -var-file="stage.tfvars" -no-color -out=plan.tfplan \
          && terraform show -no-color plan.tfplan
      
      - name: Reformat Plan
        continue-on-error: true
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

      - name: Put Plan in Env Var
        continue-on-error: true
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  apply:
    name: 'Apply'
    runs-on: ubuntu-latest
    needs: plan
    environment:
        name: approve

    steps:

      - name: Apply Terraform
        if: steps.plan.outcome == 'success'
        id: apply
        continue-on-error: true
        run: |
          cd terraform/${{ matrix.path }}
          terraform apply \
            -input=false \
            -no-color \
            tfplan

